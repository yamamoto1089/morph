morpheme show
解析結果　ビジュアル画面
<%= link_to 'ユーザーページ', user_path(@book.user.id) %>

<div id="cloud" data-words=<%= @words_array %>></div>


<div>
  <table>
    <tr>
      <th>名詞</th>
      <th>頻出度</th>
    </tr>
    <% @table_meishi.each do |meishi| %>
    <tr>
      <td><%= meishi[:meishi] %></td>
      <td><%= meishi[:count] %></td>
    </tr>
    <% end %>
  </table>
</div>

<div>
  <table>
    <tr>
      <th>動詞</th>
      <th>頻出度</th>
    </tr>
    <% @table_doushi.each do |doushi| %>
    <tr>
      <td><%= doushi[:doushi] %></td>
      <td><%= doushi[:count] %></td>
    </tr>
    <% end %>
  </table>
</div>

<div>
  <table>
    <tr>
      <th>品詞</th>
      <th>頻出度</th>
    </tr>
    <% @table_hinshi.each do |hinshi| %>
    <tr>
      <td><%= hinshi[:hinshi] %></td>
      <td><%= hinshi[:count] %></td>
    </tr>
    <% end %>
  </table>
</div>
<!-- ここからJS -->
<script defer>
  const TARGET_ELEMENT_ID = '#cloud' //IDだから#をつける
  const cloud = document.querySelector(TARGET_ELEMENT_ID)
  var words = JSON.parse(cloud.getAttribute('data-words'))

  //width, height
  const w = 500, //表示画面の横幅
        h = 500 //表示画面の縦幅

  const random = d3.randomIrwinHall(100); //Irwin–Hall分布の乱数を発生させるためのコンストラクタ,()内の数値変えてもあまり変わらない
  const countMax = d3.max(words, function(w){ return w.size });//wordsというarreyのsizeの最大値をwに返す？
  const sizeScale = d3.scaleLinear().domain([0, countMax]).range([5, 200])//d3.scaleLinearはdomainで指定した範囲を、rangeで指定した範囲に変換して出力する関数を設定する。0~countMaxまでの文字サイズを10〜w/2までのレンジに変換

  //各wordsについて表示するときの大きさや傾きを設定
  d3.layout.cloud().size([w, h])//layoutは生データを中間形式に変換する関数、この場合はwordsのsizeのみ変更?
    .words(words)//??
    .rotate(function() { return (~~(Math.random() * 6) - 3) * 30; }) // ~~は小数点以下切り捨て.rotateは回転.Math??
    .font("Impact")//
    .fontSize(function(d) { return sizeScale(d.size); })//fontsizeの関数dに	sizeの値を入れている？
    .on("end", draw) //下記のdraw描画関数の読み込み
    .start();//実行？

  function draw(words) {
    console.log(words)//wordsの値をコンソール上に実行できる便利
    d3.select(TARGET_ELEMENT_ID)//selectでtag(今回はTARGET_ELEMENT_ID)を選択している
      .append("svg")//appendとは?svgのcssはどこに？
      .attr("class", "ui fluid image") // style using semantic ui
      .attr("viewBox", "0 0 " + w + " " + h )  // ViewBox : x, y, width, height. viewboxの横幅縦幅を文字サイズに合わせてる？
      .attr("width", "100%")    // 表示サイズの設定
      .attr("height", "100%")   // 表示サイズの設定
      .append("g")
      .attr("transform", "translate(" + w / 2 + "," + h / 2 + ")")//attrはHTMLの属性の取得や設定ができる
      .selectAll("text")//全てのtag(text)を選択している
      .data(words)//??
      .enter().append("text")//enterはメソッドらしい・・・？
      .style("font-size", function(d) { return d.size + "px"; })//styleは要素のスタイル値を変更したりするやつ.関数dをd.sizeのピクセルに変更？
      .style("font-family", "Impact")//font-familyをimpactに変更
      .style("fill", function(d, i) { return d3.schemeCategory10[i % 10]; })//d3.schemeCategory10というカラーテーマに従って
      .attr("text-anchor", "middle")//
      .attr("transform", function(d) {
        return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
      })//
      .text(function(d) { return d.text; });
  }
</script>

<style>
  #cloud{
   width: 500px;
   height: 500px;
  box-sizing: border-box;
  border: 1px solid #ccc;
  }
</style>





<div id="dataset" data-words=<%= @hinshis_array %>></div>
<div id="dataset" data-words=<%= @meishis_array %>></div>
<div id="dataset" data-words=<%= @doushis_array %>></div>
<!-- 以下円グラフ -->
<script>
  // 1. データの準備
  var dataset = <%= @meishis_array %>;
  console.log(dataset)//wordsの値をコンソール上に実行できる便利
  var width = 200; // グラフの幅
  var height = 200; // グラフの高さ
  var radius = Math.min(width, height) / 1 - 100;
 
  // 2. SVG領域の設定
  var svg = d3.select("body").append("svg").attr("width", width).attr("height", height);
 
  g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
 
  // 3. カラーの設定
  var color = d3.scaleOrdinal()
    .range(["#DC3912", "#3366CC", "#109618", "#FF9900", "#990099"]);
 
  // 4. pieチャートデータセット用関数の設定
  var pie = d3.pie()
    .value(function(d) { return d.count; })
    .sort(null);
 
  // 5. pieチャートSVG要素の設定
  var pieGroup = g.selectAll(".pie")
    .data(pie(dataset))
    .enter()
    .append("g")
    .attr("class", "pie");
 
  arc = d3.arc()
    .outerRadius(radius)
    .innerRadius(0);
 
  pieGroup.append("path")
    .attr("d", arc)
    .attr("fill", function(d) { return color(d.index) })
    .attr("opacity", 0.75)
    .attr("stroke", "white");
 
  // 6. pieチャートテキストSVG要素の設定
  var text = d3.arc()
    .outerRadius(radius - 30)
    .innerRadius(radius - 30);
 
  pieGroup.append("text")
    .attr("fill", "black")
    .attr("transform", function(d) { return "translate(" + text.centroid(d) + ")"; })
    .attr("dy", "5px")
    .attr("font", "10px")
    .attr("text-anchor", "middle")
    .text(function(d) { return d.data.meishi; });
  </script>



<script>
  // 1. データの準備
  var dataset = <%= @doushis_array %>;
  console.log(dataset)//wordsの値をコンソール上に実行できる便利
  var width = 200; // グラフの幅
  var height = 200; // グラフの高さ
  var radius = Math.min(width, height) / 1 - 100;
 
  // 2. SVG領域の設定
  var svg = d3.select("body").append("svg").attr("width", width).attr("height", height);
 
  g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
 
  // 3. カラーの設定
  var color = d3.scaleOrdinal()
    .range(["#DC3912", "#3366CC", "#109618", "#FF9900", "#990099"]);
 
  // 4. pieチャートデータセット用関数の設定
  var pie = d3.pie()
    .value(function(d) { return d.count; })
    .sort(null);
 
  // 5. pieチャートSVG要素の設定
  var pieGroup = g.selectAll(".pie")
    .data(pie(dataset))
    .enter()
    .append("g")
    .attr("class", "pie");
 
  arc = d3.arc()
    .outerRadius(radius)
    .innerRadius(0);
 
  pieGroup.append("path")
    .attr("d", arc)
    .attr("fill", function(d) { return color(d.index) })
    .attr("opacity", 0.75)
    .attr("stroke", "white");
 
  // 6. pieチャートテキストSVG要素の設定
  var text = d3.arc()
    .outerRadius(radius - 30)
    .innerRadius(radius - 30);
 
  pieGroup.append("text")
    .attr("fill", "black")
    .attr("transform", function(d) { return "translate(" + text.centroid(d) + ")"; })
    .attr("dy", "5px")
    .attr("font", "10px")
    .attr("text-anchor", "middle")
    .text(function(d) { return d.data.doushi; });
  </script>









<script>
  // 1. データの準備
  var dataset = <%= @hinshis_array %>;
  console.log(dataset)//wordsの値をコンソール上に実行できる便利
  var width = 200; // グラフの幅
  var height = 200; // グラフの高さ
  var radius = Math.min(width, height) / 1 - 100;
 
  // 2. SVG領域の設定
  var svg = d3.select("body").append("svg").attr("width", width).attr("height", height);
 
  g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
 
  // 3. カラーの設定
  var color = d3.scaleOrdinal()
    .range(["#DC3912", "#3366CC", "#109618", "#FF9900", "#990099"]);
 
  // 4. pieチャートデータセット用関数の設定
  var pie = d3.pie()
    .value(function(d) { return d.count; })
    .sort(null);
 
  // 5. pieチャートSVG要素の設定
  var pieGroup = g.selectAll(".pie")
    .data(pie(dataset))
    .enter()
    .append("g")
    .attr("class", "pie");
 
  arc = d3.arc()
    .outerRadius(radius)
    .innerRadius(0);
 
  pieGroup.append("path")
    .attr("d", arc)
    .attr("fill", function(d) { return color(d.index) })
    .attr("opacity", 0.75)
    .attr("stroke", "white");
 
  // 6. pieチャートテキストSVG要素の設定
  var text = d3.arc()
    .outerRadius(radius - 30)
    .innerRadius(radius - 30);
 
  pieGroup.append("text")
    .attr("fill", "black")
    .attr("transform", function(d) { return "translate(" + text.centroid(d) + ")"; })
    .attr("dy", "5px")
    .attr("font", "10px")
    .attr("text-anchor", "middle")
    .text(function(d) { return d.data.hinshi; });
  </script>











  <script>
  // 1. 描画用のデータ準備
  var width = document.querySelector("svg").clientWidth;
  var height = document.querySelector("svg").clientHeight;
  var nodesData = [];
  for(var i = 0; i < 50; i++) {
    nodesData.push({
      "x": width * Math.random(),
      "y": height * Math.random(),
      "r": 40 * Math.random() + 5
    });
  }
 console.log(nodeData)
  // 2. svg要素を配置
  var nodeGroup = d3.select("svg")
    .selectAll("g")
    .data(nodesData)
    .enter()
    .append("g")
    .call(d3.drag()
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended));
 
  nodeGroup.append("circle")
    .attr("cx", function(d) { return d.x; })
    .attr("cy", function(d) { return d.y; })
    .attr("r", function(d) { return d.r })
    .attr("fill", "Gold")
    .attr("stroke", "black")
    .append("title")
    .text("This is title.");
 
  nodeGroup.append("text")
    .attr("x", function(d) { return d.x; })
    .attr("y", function(d) { return d.y; })
    .attr("text-anchor", "middle")
    .attr("dominant-baseline", "middle")
    .style("fill", "steelblue")
    .text("Ball")
    .append("title")
    .text("This is title.");
 
  // 3. forceSimulation設定
  var simulation = d3.forceSimulation()
    .force("collide",
      d3.forceCollide()
      .radius(function(d) { return d.r + 1 }))
    .force("charge", d3.forceManyBody())
    .force("x", d3.forceX().strength(0.05).x(width / 2))
    .force("y", d3.forceY().strength(0.05).y(height / 2));
 
  simulation
    .nodes(nodesData)
    .on("tick", ticked);
 
  // 4. forceSimulation 描画更新用関数
  function ticked() {
    nodeGroup.select("circle")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; });
    nodeGroup.select("text")
      .attr("x", function(d) { return d.x; })
      .attr("y", function(d) { return d.y; });
  }
 
  // 5. ドラッグ時のイベント関数
  function dragstarted(d) {
    if(!d3.event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }
 
  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }
 
  function dragended(d) {
    if(!d3.event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }
  </script>
